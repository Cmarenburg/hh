<?php

require_once 'PHPUnit/Framework.php';

/**
 * Test class for HH_Object.
 * Generated by PHPUnit on 2010-08-16 at 18:49:21.
 */
class HH_ObjectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var HH_ObjectTestClass
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HH_ObjectTestClass(
            1,
            array(
                'id' => 1,
                'test' => 'test',
                'myDatetime' => '1999-01-01 01:01:01+00:00'
            ),
            array('test' => 'test')
        );
    }

    public function testSetConfig()
    {
        $this->object->setConfig(array());
    }

    public function test__set()
    {
        $this->object->test2 = 'test2';
        $this->assertEquals('test2', $this->object->test2);
    }

    public function test__get()
    {
        $this->assertEquals('test', $this->object->test);
        $this->assertType('Zend_Date', $this->object->myDatetime);
    }

    public function test__isset()
    {
        $this->assertTrue(isset($this->object->test));
        $this->assertFalse(isset($this->object->test2));
    }

    public function test__unset()
    {
        $this->object->test2 = 'test2';
        $this->assertEquals('test2', $this->object->test2);
        $this->assertTrue(isset($this->object->test2));
        unset($this->object->test2);
        $this->assertFalse(isset($this->object->test2));
    }

    public function test__toString()
    {
        $this->assertEquals(
            'HH_ObjectTestClass_1', (string) $this->object
        );
    }

    public function testOffsetExists()
    {
        $this->assertTrue($this->object->offsetExists('test'));
    }

    public function testOffsetGet()
    {
        $this->assertEquals('test', $this->object['test']);
    }

    public function testOffsetSet()
    {
        unset($this->object->test2);
        $this->object['test2'] = 'test2';
        $this->assertEquals('test2', $this->object['test2']);
    }

    public function testOffsetUnset()
    {
        $this->object['test2'] = 'test2';
        $this->assertTrue(isset($this->object->test2));
        unset($this->object['test2']);
        $this->assertFalse(isset($this->object->test2));
    }

    public function testSerialize()
    {
        $this->assertInternalType('string', serialize($this->object));
    }

    public function testUnserialize()
    {
        $obj = serialize($this->object);

        $obj = unserialize($obj);

        $this->assertType('HH_Object', $obj);
        $this->assertEquals('testing', $obj->testing);
    }

    public function testAttach()
    {
        $this->assertNull(
            $this->object->attach(new HH_ObjectTestClassObserver)
        );
    }

    public function testDetach()
    {
        $obj = new HH_ObjectTestClassObserver();

        $this->assertNull(
            $this->object->attach($obj)
        );

        $this->assertNull(
            $this->object->detach($obj)
        );
    }

    public function testNotify()
    {
        $event = new HH_ObjectTestClassObserverEvent('test');
        $this->object->notify($event);
        $this->assertType('HH_ObjectTestClassObserverEvent', HH_ObjectTestClassObserver::$event);
        $this->assertEquals($event->getEvent(), HH_ObjectTestClassObserver::$event->getEvent());
        $this->assertType('HH_Observer_Subject', HH_ObjectTestClassObserver::$subject);
    }

    public function testGetIterator()
    {
        $this->assertType('ArrayIterator', $this->object->getIterator());
    }

    public function testCount()
    {
        $this->assertEquals(3, count($this->object));
    }

    public function testToArray()
    {
        $this->assertInternalType('array', $this->object->toArray());
    }

    public function testIsEmpty()
    {
        $this->assertFalse($this->object->isEmpty());
    }

    public function testStaticGetters()
    {
        $this->assertType(
            'Zend_Db_Adapter_Abstract',
            HH_ObjectTestClass::getStaticZendDb()
        );

        $this->assertType(
            'HH_Translate',
            HH_ObjectTestClass::getStaticZendTranslate()
        );

        $this->assertType(
            'Zend_Cache_Core',
            HH_ObjectTestClass::getStaticZendCache()
        );
    }

    public function testRest()
    {
        $this->object->mydata = 'mydata';
        $this->assertEquals('mydata', $this->object->mydata);
        $this->object->reset();
        $data = $this->object->toArray();
        $this->assertInternalType('array', $data);
        $this->assertTrue(empty($data['mydata']));
    }

    public function testPrepareData()
    {
        $date = Zend_Date::now();

        $result = $this->object->prepareData(
            array(
                'date' => $date,
                'object' => new HH_ObjectTestPrepareDbData()
            ),
            true
        );

        $date->setTimezone('UTC');

        $this->assertInternalType('array', $result);
        $this->assertEquals(
            $date->get('yyyy-MM-dd HH:mm:ss'),
            $result['date']
        );
        $this->assertEquals('hello', $result['object']);
        $this->assertNotEmpty($result['updatedDatetime']);
        $this->assertNotEmpty($result['addedDatetime']);
    }

    public function testGetters()
    {
        $this->assertType(
            'Zend_Cache_Core',
            $this->object->getZendCache()
        );
        $this->assertType(
            'Zend_Db_Adapter_Abstract',
            $this->object->getZendDb()
        );
        $this->assertType(
            'HH_Translate',
            $this->object->getZendTranslate()
        );
    }
}

class HH_ObjectTestPrepareDbData
{
    public function  __toString()
    {
        return 'hello';
    }
}

class HH_ObjectTestClass extends HH_Object
{
    protected $_defaultObservers = array(
        'HH_ObjectTestClassObserver'
    );

    public function notify($event)
    {
        $this->_notify($event);
    }

    /**
     * Get data (lazy loader)
     */
    protected function _get()
    {
        $this->_setData(array('testing' => 'testing'));
    }

    /**
     * Insert data into object
     *
     * @param array|null $data
     * @return boolean
     * @throws HH_Object_Exception_Id If primary key needs to be defined
     * @throws HH_Object_Exception_NoData If no data to insert
     */
    public function insert($data = null)
    {

    }

    /**
     * Update data in current object
     *
     * @param array|null $data
     * @return boolean
     * @throws HH_Object_Exception_Id if object ID is not set
     */
    public function update($data = null)
    {

    }

    /**
     * Delete current object
     *
     * @throws HH_Object_Exception_Id if object ID is not set
     * @return boolean
     */
    public function delete()
    {

    }

    public static function getFilter($filter = null, $options = array())
    {

    }

    public static function getStaticZendTranslate()
    {
        return self::_getStaticZendTranslate();
    }

    public static function getStaticZendDb()
    {
        return self::_getStaticZendDb();
    }

    public static function getStaticZendCache()
    {
        return self::_getStaticZendCache();
    }

    public function reset()
    {
        return $this->_reset();
    }

    public function prepareData($data, $insert)
    {
        return $this->_prepareData($data, $insert);
    }

    public function getZendTranslate()
    {
        return $this->_getZendTranslate();
    }

    public function getZendCache()
    {
        return $this->_getZendCache();
    }

    public function getZendDb()
    {
        return $this->_getZendDb();
    }
}

class HH_ObjectTestClassObserver implements HH_Observer
{
    public static $subject;
    public static $event;

    public function update (HH_Observer_Subject $subject, HH_Observer_Event $event = null)
    {
        self::$subject = $subject;
        self::$event = $event;
    }
}

class HH_ObjectTestClassObserverEvent extends HH_Observer_Event
{
    
}
?>

