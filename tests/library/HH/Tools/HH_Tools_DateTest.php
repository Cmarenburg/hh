<?php

require_once 'PHPUnit/Framework.php';

/**
 * Test class for HH_Tools_Date.
 * Generated by PHPUnit on 2010-08-15 at 20:46:52.
 */
class HH_Tools_DateTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var HH_Tools_Date
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HH_Tools_Date;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testDateTimeToDb()
    {
        $date = HH_Tools_Date::dateTimeToDb();
        $this->assertInternalType('string', $date);

        $date = Zend_Date::now();

        $result = HH_Tools_Date::dateTimeToDb($date);
        $date->setTimezone('UTC');
        $iso = $date->get('yyyy-MM-dd HH:mm:ss');
        $timestamp = $date->getTimestamp();
        $this->assertEquals($iso, $result);

        $result = HH_Tools_Date::dateTimeToDb($iso);
        $this->assertEquals($iso, $result);

        $result = HH_Tools_Date::dateTimeToDb($timestamp);
        $this->assertEquals($iso, $result);
    }

    public function testDateTimeToIso()
    {
        $date = Zend_Date::now();
        $date->setTimezone('UTC');
        $timestamp = $date->getTimestamp();
        $iso = $date->getIso();

        $result = HH_Tools_Date::dateTimeToIso($date);
        $this->assertEquals($iso, $result);

        $result = HH_Tools_Date::dateTimeToIso($timestamp);
        $this->assertEquals($iso, $result);

        $result = HH_Tools_Date::dateTimeToIso($iso);
        $this->assertEquals($iso, $result);
    }

    public function testDateToDb()
    {
        $date = Zend_Date::now();
        $date->setTimezone('UTC');
        $string = $date->get('yyyy-MM-dd');
        $timestamp= $date->getTimestamp();

        $result = HH_Tools_Date::dateToDb($date);
        $this->assertEquals($string, $result);

        $result = HH_Tools_Date::dateToDb($timestamp);
        $this->assertEquals($string, $result);

        $result = HH_Tools_Date::dateToDb($string);
        $this->assertEquals($string, $result);
    }

    public function testIsoDatetimeToUTC()
    {
        $date = '1999-01-01 01:01:01';
        $dateExpected = '1999-01-01T01:01:01+00:00';
        $res = HH_Tools_Date::isoDatetimeToUTC($date);
        $this->assertEquals($res->toString(Zend_Date::ISO_8601), $dateExpected);

        $zendDate = new Zend_Date($dateExpected);
        $res = HH_Tools_Date::isoDatetimeToUTC($zendDate);
        $this->assertEquals($res->toString(Zend_Date::ISO_8601), $dateExpected);

        $timestamp = $zendDate->getTimestamp();
        $res = HH_Tools_Date::isoDatetimeToUTC($timestamp);
        $this->assertEquals($res->toString(Zend_Date::ISO_8601), $dateExpected);

        $res = HH_Tools_Date::isoDatetimeToUTC(null);
        $this->assertEquals($res, null);
    }

}

?>
