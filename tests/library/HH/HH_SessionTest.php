<?php

/**
 * Test class for HH_Session.
 * Generated by PHPUnit on 2010-09-18 at 12:47:14.
 */
class HH_SessionTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var HH_Session
     */
    protected $object;
    protected $id = null;
    protected $data = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->id = rand(1, 5000);
        $this->data['data'] = 'hello';
        $this->data['id'] = $this->id;
        $this->data['addedTimestamp'] = Zend_Date::now()->getTimestamp();
        $this->object = new HH_Session($this->id, $this->data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testDelete()
    {
        $this->object->delete();

        $this->assertEmpty($this->object->toArray());
    }

    public function testInsert()
    {
        $data = array(
            'id' => $this->id,
            'data' => 'hi'
        );
        $this->object->insert($data);
        $data2 = $this->object->data;
        $this->assertEquals($data['data'], $data2);
        $this->object->delete();
    }

    public function testUpdate()
    {
        $data = array(
            'id' => $this->id,
            'data' => 'hi'
        );
        $this->object->update($data);
        $data2 = $this->object->data;
        $this->assertEquals($data['data'], $data2);
        $this->object->delete();
    }

    public function testGetFilter()
    {
    }

    public function testOpen()
    {
        $this->assertNull($this->object->open(null, null));

    }

    public function testClose()
    {
        $this->assertTrue($this->object->close());
    }

    public function testRead()
    {
        $this->object->update();
        $result = $this->object->read($this->id);

        $this->assertEquals($this->data['data'], $result);
    }

    public function testWrite()
    {
        $data = 'howdy';

        $this->object->write($this->id, $data);

        $data2 = $this->object->data;

        $this->assertEquals($data, $data2);
    }

    public function testDestroy()
    {
        $this->object->destroy($this->id);
        $this->assertEmpty($this->object->toArray());
    }

    /**
     * @todo Implement testGc().
     */
    public function testGc()
    {
        $this->assertTrue($this->object->gc(100000));
    }

}