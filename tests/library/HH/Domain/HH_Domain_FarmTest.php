<?php

/**
 * Test class for HH_Domain_Farm.
 * Generated by PHPUnit on 2010-09-18 at 15:06:41.
 */
class HH_Domain_FarmTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var HH_Domain_Farm
     */
    protected $object;
    protected $id = 999999;
    protected $data;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->data = array(
            'id' => $this->id,
            'status' => HH_Domain_Farm::STATUS_ACTIVE,
            'version' => HH_Domain_Farm::getLatestVersion(),
            'name' => 'Foo Farm',
            'address' => '123 Foo Street',
            'address2' => '',
            'city' => 'Port Williams',
            'state' => 'NS',
            'zipCode' => 'B4N5B8',
            'country' => 'CA',
            'timeZone' => 'America/Halifax',
            'telephone' => '90236522213',
            'fax' => '9023652213',
            'email' => 'foo@farm.com',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'primaryFarmerId' => null,
            'subdomain' => 'foofarm'
        );

        $this->object = new HH_Domain_Farm($this->id, $this->data);
        $this->object->delete();
        $this->object = new HH_Domain_Farm($this->id, $this->data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->delete();
    }

    public function testGetLatestVersion()
    {
        $this->assertInternalType('float', (float) HH_Domain_Farm::getLatestVersion());
    }

    public function testDelete()
    {
        $this->object->delete();

        $this->assertEmpty($this->object->toArray());
    }

    public function testInsert()
    {
        $this->object->insert($this->data);
        $this->assertEquals($this->data, $this->object->toArray());
        $object2 = new HH_Domain_Farm($this->id);
        $data = $object2->toArray();
        $data2 = $this->object->toArray();
        $this->assertEquals($data, $data2);
    }

    public function testUpdate()
    {
        $this->object->insert($this->data);
        $this->assertEquals($this->data, $this->object->toArray());
        $this->object->update(array('name' => 'fred'));
        $this->assertEquals('fred', $this->object->name);
    }

    public function testGetFilter()
    {
        $filter = HH_Domain_Farm::getFilter(HH_Domain_Farm::FILTER_NEW);
        $this->assertType('Zend_Filter_Input', $filter);
        $filter->setData($this->data);
        $this->assertTrue($filter->isValid());
    }

    public function testfetchSingleBySubdomain()
    {
        $this->object->insert($this->data);
        $subdomain = HH_Domain_Farm::fetchSingleBySubdomain($this->data['subdomain']);
        $this->assertType('HH_Domain_Farm', $subdomain);
        $this->assertEquals($this->data['subdomain'], $subdomain->subdomain);
    }

}