<?php

/**
 * Test class for HH_Domain_Farmer.
 * Generated by PHPUnit on 2010-09-18 at 21:34:00.
 */
class HH_Domain_FarmerTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var HH_Domain_Farmer
     */
    protected $object;
    protected $id = 999999;
    protected $data = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->data = array(
            'id' => $this->id,
            'firstName' => 'Foo',
            'lastName' => 'Bar',
            'email' => 'foo@bar.com',
            'userName' => 'testing' . rand(1,1000),
            'password' => 'testing',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'farmId' => null,
            'role' => HH_Domain_Farmer::ROLE_ADMIN
        );
        $this->object = new HH_Domain_Farmer($this->id, $this->data);
        $this->object->delete();
        $this->object = new HH_Domain_Farmer($this->id, $this->data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->delete();
    }

    public function testDelete()
    {
        $this->object->insert($this->data);
        $this->assertEquals($this->data['firstName'], $this->object->firstName);
        $this->object->delete();

        $this->assertEmpty($this->object->toArray());
    }

    public function testInsert()
    {
        $this->object->insert($this->data);
        $this->assertEquals($this->data, $this->object->toArray());
        $object2 = new HH_Domain_Farmer($this->id);
        $data = $object2->toArray();
        unset($data['password']);
        $data2 = $this->object->toArray();
        unset($data2['password']);
        $this->assertEquals($data, $data2);
    }

    public function testUpdate()
    {
        $this->object->insert($this->data);
        $this->assertEquals($this->data, $this->object->toArray());
        $this->object->update(array('firstName' => 'fred'));
        $this->assertEquals('fred', $this->object->firstName);
    }

    public function testGetFilter()
    {
        $filter = HH_Domain_Farmer::getFilter(HH_Domain_Farmer::FILTER_NEW);
        $this->assertType('Zend_Filter_Input', $filter);
        $filter->setData($this->data);
        $this->assertTrue($filter->isValid());

        $filter = HH_Domain_Farmer::getFilter(HH_Domain_Farmer::FILTER_LOGIN);
        $this->assertType('Zend_Filter_Input', $filter);
        $filter->setData($this->data);
        $this->assertTrue($filter->isValid());
    }

    public function testAuthenticate()
    {
        $this->object->insert($this->data);
        $result = HH_Domain_Farmer::authenticate(
            $this->data['userName'],
            $this->data['password'],
            $this->data['role'],
            null
        );
        $this->assertType('Zend_Auth_Result', $result);
        $this->assertTrue($result->isValid());

        $farmData = array(
            'id' => 999999,
            'status' => HH_Domain_Farm::STATUS_ACTIVE,
            'version' => HH_Domain_Farm::getLatestVersion(),
            'name' => 'Foo Farm',
            'address' => '123 Foo Street',
            'address2' => '',
            'city' => 'Port Williams',
            'state' => 'NS',
            'zipCode' => 'B4N5B8',
            'country' => 'CA',
            'timeZone' => 'America/Halifax',
            'telephone' => '90236522213',
            'fax' => '9023652213',
            'email' => 'foo@farm.com',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'primaryFarmerId' => null,
            'subdomain' => 'foofarm'
        );

        $farm = new HH_Domain_Farm(999999, $farmData);
        $farm->delete();
        $farm = new HH_Domain_Farm(999999, $farmData);
        $farm->insert($farmData);

        $data = array(
            'id' => $this->id - 1,
            'firstName' => 'Foo',
            'lastName' => 'Bar',
            'email' => 'foo@bar.com',
            'userName' => 'testing' . rand(1,1000),
            'password' => 'testing',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'farmId' => 999999,
            'role' => HH_Domain_Farmer::ROLE_FARMER
        );
        $farmer = new HH_Domain_Farmer($data['id'], $data);
        $farmer->delete();
        $farmer = new HH_Domain_Farmer($data['id'], $data);
        $farmer->insert($data);

        $result = HH_Domain_Farmer::authenticate(
            $data['userName'],
            $data['password'],
            $data['role']
        );
        $this->assertType('Zend_Auth_Result', $result);
        $this->assertTrue($result->isValid());

        $farmer->delete();

        $data = array(
            'id' => $this->id - 1,
            'firstName' => 'Foo',
            'lastName' => 'Bar',
            'email' => 'foo@bar.com',
            'userName' => 'testing' . rand(1,1000),
            'password' => 'testing',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'farmId' => 999999,
            'role' => HH_Domain_Farmer::ROLE_MEMBER
        );
        $farmer = new HH_Domain_Farmer($data['id'], $data);
        $farmer->delete();
        $farmer = new HH_Domain_Farmer($data['id'], $data);
        $farmer->insert($data);

        $result = HH_Domain_Farmer::authenticate(
            $data['userName'],
            $data['password'],
            $data['role'],
            $farm
        );
        $this->assertType('Zend_Auth_Result', $result);
        $this->assertTrue($result->isValid());

        $farmer->delete();
        $farm->delete();
    }

    public function testGetAuthenticated()
    {
        $this->object->insert($this->data);

        $result = HH_Domain_Farmer::authenticate(
            $this->data['userName'],
            $this->data['password'],
            $this->data['role'],
            null
        );
        $this->assertTrue($result->isValid());
        $authenticated = HH_Domain_Farmer::getAuthenticated();
        $this->assertType('HH_Domain_Farmer', $authenticated);
        $data = $this->object->toArray();
        unset($data['password']);
        $data2 = $authenticated->toArray();
        unset($data2['password']);
        $this->assertEquals($data, $data2);
    }

    public function testLogout()
    {
        $this->assertNull($this->object->logout());
    }

    public function testGetFarm()
    {
        $this->object->insert($this->data);

        $data = array(
            'id' => $this->id,
            'status' => HH_Domain_Farm::STATUS_ACTIVE,
            'version' => HH_Domain_Farm::getLatestVersion(),
            'name' => 'Foo Farm',
            'address' => '123 Foo Street',
            'address2' => '',
            'city' => 'Port Williams',
            'state' => 'NS',
            'zipCode' => 'B4N5B8',
            'country' => 'CA',
            'timeZone' => 'America/Halifax',
            'telephone' => '90236522213',
            'fax' => '9023652213',
            'email' => 'foo@farm.com',
            'addedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'updatedDatetime' => Zend_Date::now()->setTimezone('UTC'),
            'primaryFarmerId' => $this->id,
            'subdomain' => 'foofarm'
        );

        $farm = new HH_Domain_Farm($data['id']);
        try {
            $farm->insert($data);
        } catch (Exception $e) {
            $farm->delete();
            $farm = new HH_Domain_Farm($data['id']);
            $farm->insert($data);
        }

        $this->data['farmId'] = $farm->id;
        $this->object->update($this->data);
        $farm2 = $this->object->getFarm();
        $this->assertType('HH_Domain_Farm', $farm2);
        $this->assertEquals($farm->toArray(), $farm2->toArray());
        $farm->delete();
    }

    public function testFetchByUserName()
    {
        $this->object->insert($this->data);
        $users = HH_Domain_Farmer::fetchByUserName($this->data['userName'], $this->data['role']);
        $this->assertInternalType('array', $users);
        $this->assertNotEmpty($users);
        $this->assertType('HH_Domain_Farmer', $users[0]);
        $array1 = $this->object->toArray();
        unset($array1['password']);
        $array2 = $users[0]->toArray();
        unset($array2['password']);
        $this->assertEquals($array1, $array2);
    }

}