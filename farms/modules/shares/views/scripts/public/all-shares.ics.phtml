<?php
$currentYear = null;
$currentWeek = null;
$inWeek = false;
$body = null;
$deliveries = array();
$shares = array();
$locationCache = HHF_Domain_Location::fetchLocations(
    $this->farm,
    array(
         'fetch' => HHF_Domain_Location::FETCH_PURCHASABLE,
         'order' => HHF_Domain_Location::ORDER_DATETIME
    )
);

$locations = array();

$ical = new Sabre\VObject\Component('VCALENDAR');
$ical->version = '2.0';
$ical->prodid = '-//Mompopmedia//NONSGML HarvestHand//EN';
$ical->calscale = 'GREGORIAN';

if (!empty($this->customer)) {
    $ical->add(
        'X-WR-CALNAME',
        $this->translate(
            '%s Deliveries for %s',
            $this->farm['name'],
            $this->customer->firstName
        )
    );
} else {
    $ical->add(
        'X-WR-CALNAME',
        $this->translate('%s Deliveries', $this->farm['name'])
    );
}
$ical->add('X-WR-TIMEZONE', $this->farm['timezone']);

$params = array(
    'format' => 'ics'
);

if (!empty($this->token)) {
    $params['t'] = $this->token;
}

$ical->add(
    'X-ORIGINAL-URL',
    $this->farm->getBaseUri() . 'shares?' . http_build_query($params)
);
$ical->add(
    'X-PUBLISHED-TTL',
    'PT3H'
);
$ical->method = 'PUBLISH';

if (!empty($this->deliveries)) {

    foreach ($this->deliveries as $delivery) {
        $currentCustomerShare = null;

        foreach ($this->customerShares as $customerShare) {
            if ($customerShare['shareId'] == $delivery['shareId']) {
                $currentCustomerShare = $customerShare;
                break;
            }
        }

        list($year, $week) = explode('W', $delivery['week']);

        if (!empty($currentCustomerShare)) {
            list($customerYear, $customerWeek) = explode('W', $currentCustomerShare['endWeek']);

            if ($year > $customerYear) {
                continue;
            }

            if ($year == $customerYear && $week > $customerWeek) {
                continue;
            }
        }

        if ($year != $currentYear || $currentWeek != $week) {
            $currentYear = $year;
            $currentWeek = $week;

            if ($inWeek) {
                foreach ($locations as $location) {
                    if (!empty($currentCustomerShare) && $location['id'] != $currentCustomerShare['locationId']) {
                        continue;
                    }

                    $entry = new Sabre\VObject\Component('VEVENT');
                    $entry->status = 'CONFIRMED';

                    $dtstamp = clone $delivery->updatedDatetime;
                    $dtstamp->setTimezone('UTC');
                    $entry->dtstamp = $dtstamp->toString('yyyyMMddTHHmmss') . 'Z';

                    $entry->uid = 'L' . $location['id']
                        . 'D' . implode('-', $deliveries)
                        . 'S' . implode('-', $shares)
                        . '@HH' . $this->farm['id'];

                    $entry->organizer = 'mailto:' . $this->farm['email'];
                    if (!empty($this->farm['telephone'])) {
                        $entry->contact = $this->farm['telephone'];
                    }

                    $dtstart = new \DateTime($year . 'W' . $week . $location['dayOfWeek']);
                    $dtstart->setTimezone(new DateTimeZone($this->farm['timezone']));
                    list($hour, $minute, $second) = explode(':', $location['timeStart']);
                    $dtstart->setTime($hour, $minute, $second);
                    $entry->dtstart = $dtstart->format('Ymd\THis');

                    $dtend = new \DateTime($year . 'W' . $week . $location['dayOfWeek']);
                    list($hour, $minute, $second) = explode(':', $location['timeEnd']);
                    $dtend->setTime($hour, $minute, $second);
                    $entry->dtend = $dtend->format('Ymd\THis');

                    $entry->summary = $this->translate(
                        '%s Pickup @ %s',
                        $this->farm['name'],
                        $location['name']
                    );

                    if (!empty($location['latitudeDegrees']) && !empty($location['longitudeDegrees'])) {
                        $entry->geo = $location['latitudeDegrees'] . ';' . $location['longitudeDegrees'];
                    }

                    $locationName = array($location['name']);
                    if (!empty($location['address'])) {
                        $locationName[] = $location['address'];
                    }

                    if (!empty($location['address2'])) {
                        $locationName[] = $location['address2'];
                    }

                    if (!empty($location['city'])) {
                        $locationName[] = $location['city'];
                    }

                    if (!empty($location['state'])) {
                        $locationName[] = $location['state'];
                    }

                    if (!empty($location['zipCode'])) {
                        $locationName[] = $location['zipCode'];
                    }

                    if (!empty($location['country'])) {
                        $locationName[] = $location['country'];
                    }

                    $entry->location = implode(', ', $locationName);

                    $entry->add('LAST-MODIFIED', $dtstamp->toString('yyyyMMddTHHmmss') . 'Z');
                    $entry->created = $delivery->addedDatetime->toString('yyyyMMddTHHmmss') . 'Z';
                    $entry->url = $this->farm->getBaseUri()
                        . 'shares?week=' . $delivery['week'];
                    $entry->contact = $this->farm->name;
                    $entry->class = 'PUBLIC';
                    $entry->description = $body . PHP_EOL . PHP_EOL
                        . $this->translate('More information') . ':'
                        . PHP_EOL . $this->farm->getBaseUri()
                        . 'shares?week=' . $delivery['week'];

                    $ical->children[] = $entry;
                }

                $body = null;
                $locations = array();
                $shares = array();
                $deliveries = array();
                $inWeek = false;
            }
        }

        $inWeek = true;

        $share = $delivery->getShare();
        $shares[] = $share['id'];
        $deliveries[] = $delivery['id'];

        foreach ($share->durations as $duration) {
            $restrictTo = $duration->restrictLocationsTo();

            foreach ($locationCache as $location) {
                if (!empty($restrictTo) && in_array($location['id'], $restrictTo)) {
                    $locations[$location['id']] = $location;
                } else if (empty($restrictTo)) {
                    $locations[$location['id']] = $location;
                }
            }
        }

        $body .= PHP_EOL . $delivery->getShare()->name . PHP_EOL . PHP_EOL;

        foreach ($delivery->getItems() as $item) {
            $body .= ' - ' . $item->item . ': ';

            $sizes = array();

            if (!empty($item->quantity_0_5)) {
                foreach ($delivery->getShare()->sizes as $size) {
                    if ($size->size == 0.5) {

                        $sizes[] = array(
                            'name' => $size->name,
                            'qty' => $item->quantity_0_5
                        );

                        break;
                    }
                }
            }

            if (!empty($item->quantity_1)) {
                foreach ($delivery->getShare()->sizes as $size) {
                    if ($size->size == 1) {

                        $sizes[] = array(
                            'name' => $size->name,
                            'qty' => $item->quantity_1
                        );

                        break;
                    }
                }
            }

            if (!empty($item->quantity_2)) {
                foreach ($delivery->getShare()->sizes as $size) {
                    if ($size->size == 2) {

                        $sizes[] = array(
                            'name' => $size->name,
                            'qty' => $item->quantity_2
                        );

                        break;
                    }
                }
            }

            if (!empty($sizes)) {
                for ($x = 0, $c = count($sizes); $x < $c; ++$x) {
                    $body .= $sizes[$x]['qty'] . ' (' . $sizes[$x]['name'] . ')';
                    if ($x + 1 != $c) {
                        $body .= '; ';
                    }
                }
            }

            $body .= PHP_EOL . '   ';

            if (!empty($item->source)) {
                $body .= $item->source;
                $body .= ' - ';
            }

            switch ($item->certification) {
                case HHF_Domain_Certification::ORGANIC:
                    $body .= $this->translate('Certified Organic');
                    break;
                case HHF_Domain_Certification::BIODYNAMIC:
                    $body .= $this->translate('Biodynamic');
                    break;
                case HHF_Domain_Certification::CERTIFIED_NATURAL:
                    $body .= $this->translate('Certified Naturally Grown');
                    break;
                case HHF_Domain_Certification::NATURAL:
                    $body .= $this->translate('Naturally Grown');
                    break;
                case HHF_Domain_Certification::GRASS:
                    $body .= $this->translate('Pastured');
                    break;
                case HHF_Domain_Certification::TRANSITIONAL:
                    $body .= $this->translate('Transition to Organic');
                    break;
                case HHF_Domain_Certification::CONVENTIONAL:
                    $body .= $this->translate('Non Organic');
                    break;
                case HHF_Domain_Certification::SPRAY_FREE:
                    $body .= $this->translate('Spray Free');
                    break;
            }

            $body .= PHP_EOL;
        }

        $body .= PHP_EOL;
    }
}

echo $ical->serialize();
